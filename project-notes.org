* Crab News
:PROPERTIES:
:CUSTOM_ID: crab-news
:END:
sketchpad for this project. notes, they come and go.

** Elm vs Crux Terms
:PROPERTIES:
:CUSTOM_ID: elm-vs-crux-terms
:END:
- to help wrap my head around it

| Elm           | Crux                | Notes/Qeestion                           |
|---------------+---------------------+------------------------------------------|
| Model         | Model               | how do I init?                           |
| View          | fn view in App      | ViewModel describes View variables?      |
| Update        | fn update in App    |                                          |
| Messages      | Events              |                                          |
| Side Effects  | Capabilities        |                                          |
| init          |                     | is there need for init?                  |
| main          |                     | is it App trait types?                   |
| subscriptions | is it Capabilities? | is there need to comm w/ shell for this? |
| ports         | is it Capabilities? | is there need to comm w/ shell for this? |
| flags         | is it unnecessary?  | initial values in Model already          |
|               |                     |                                          |

** Model
:PROPERTIES:
:CUSTOM_ID: model
:END:
#+begin_src rust
#[derive(Default, Serialize)]
pub struct Model {
    accounts: Vec<Account>,
    subscriptions: Vec<Subscription>,
    feeds: Vec<Feed>,
    feeds_refresh_interval: RefreshInterval,
    feed_store: FeedStore,
    entries: Vec<Entry>,
    entry_read: ReadStatus,
    entry_star: StarStatus,
    entry_open_method: OpeningMethod,
    entry_use_browser: Browser,
    content: Option<Content>,
}
#+end_src

** ViewModel
:PROPERTIES:
:CUSTOM_ID: viewmodel
:END:
#+begin_src rust
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ViewModel {
    pub theme: Theme,
    pub text_size: TextSize,
    pub feed_view: FeedView,
    pub entry_read: ReadStatus,
    pub entry_star: StarStatus,
}
#+end_src

** Types
:PROPERTIES:
:CUSTOM_ID: types
:END:
*** Account
:PROPERTIES:
:CUSTOM_ID: account
:END:
- Do I need a crate here? Does Crux provide native integration?
- Likely needing to code my own Capability for this one?
- Probably best left for a future version?

1. Account

   #+begin_src rust
   pub struct Account {
       type: AccountType, // also unique ID
       name: AccountName,
       feeds: Vec<Feed>,
   }
   #+end_src

2. AccountType

   #+begin_src rust
   pub enum AccountType {
       Local,
       Apple,
       Google,
       Microsoft,
       Canonical,
       Dropbox,
   }
   #+end_src

3. AccountAuth

   #+begin_src rust
   pub enum AccountAuth {
       LoggedIn Token,
       LoggedOut,
   }
   #+end_src

*** Subscriptions
:PROPERTIES:
:CUSTOM_ID: subscriptions
:END:
- import/export fn of OPML file
- crate: [[https://crates.io/crates/opml]]

1. Subscription

   #+begin_src rust
   pub struct Subscription {
       pub id: String,
       pub feed_type: FeedType,
       pub title: Option<Text>,
       pub text: Option<Text>,
       pub description: Option<Text>,
       pub links: Vec<Link>,
   }
   #+end_src

2. Example OPML

   #+begin_src xml
   <?xml version="1.0" encoding="ISO-8859-1"?>
   <opml version="2.0">
     <head>
       <title>mySubscriptions.opml</title>
       <dateCreated>Sat, 18 Jun 2005 12:11:52 GMT</dateCreated>
       <ownerName>Crab News</ownerName>
     </head>
     <body>
        <outline text="Gentle Wash Records" title="Gentle Wash Records" description="" type="rss" version="RSS" htmlUrl="https://gentlewashrecords.com/" xmlUrl="https://gentlewashrecords.com/atom.xml"/>
     </body>
   </opml>
   #+end_src

3. OPML

   1. OPML

      #+begin_src rust
      pub struct OPML {
          pub version: String,
          pub head: Option<Head>,
          pub body: Body,
      }
      #+end_src

   2. Head

      #+begin_src rust
      pub struct Head {
          pub title: Option<String>,
          pub date_created: Option<String>,
          pub date_modified: Option<String>,
          pub owner_name: Option<String>,
          pub owner_email: Option<String>,
          pub owner_id: Option<String>,
          pub docs: Option<String>,
          pub expansion_state: Option<String>,
          pub vert_scroll_state: Option<i32>,
          pub window_top: Option<i32>,
          pub window_left: Option<i32>,
          pub window_bottom: Option<i32>,
          pub window_right: Option<i32>,
      }
      #+end_src

   3. Body

      #+begin_src rust
      pub struct Body {
          pub outlines: Vec<Outline>,
      }
      #+end_src

   4. Outline

      #+begin_src rust
      pub struct Outline {
          pub text: String,
          pub type: Option<String>,
          pub is_comment: Option<bool>,
          pub is_breakpoint: Option<bool>,
          pub created: Option<String>,
          pub category: Option<String>,
          pub outlines: Vec<Outline>,
          pub xml_url: Option<String>,
          pub description: Option<String>,
          pub html_url: Option<String>,
          pub language: Option<String>,
          pub title: Option<String>,
          pub version: Option<String>,
          pub url: Option<String>,
      }
      #+end_src

*** Feeds
:PROPERTIES:
:CUSTOM_ID: feeds
:END:
- crate: [[https://crates.io/crates/feed-rs]]

1. Feed

   #+begin_src rust
   pub struct Feed {
       pub feed_type: FeedType,
       pub id: String,
       pub title: Option<Text>,
       pub updated: Option<DateTime<Utc>>,
       pub authors: Vec<Person>,
       pub description: Option<Text>,
       pub links: Vec<Link>,
       pub categories: Vec<Category>,
       pub contributors: Vec<Person>,
       pub generator: Option<Generator>,
       pub icon: Option<Image>,
       pub language: Option<String>,
       pub logo: Option<Image>,
       pub published: Option<DateTime<Utc>>,
       pub rating: Option<MediaRating>,
       pub rights: Option<Text>,
       pub ttl: Option<u32>,
       pub entries: Vec<Entry>,
   }
   #+end_src

2. Entry

   #+begin_src rust
   pub struct Entry {
       pub id: String,
       pub title: Option<Text>,
       pub updated: Option<DateTime<Utc>>,
       pub authors: Vec<Person>,
       pub content: Option<Content>,
       pub links: Vec<Link>,
       pub summary: Option<Text>,
       pub categories: Vec<Category>,
       pub contributors: Vec<Person>,
       pub published: Option<DateTime<Utc>>,
       pub source: Option<String>,
       pub rights: Option<Text>,
       pub media: Vec<MediaObject>,
       pub language: Option<String>,
       pub base: Option<String>,
   }
   #+end_src

3. Content

   #+begin_src rust
   pub struct Content {
       pub body: Option<String>,
       pub content_type: MediaTypeBuf,
       pub length: Option<u64>,
       pub src: Option<Link>,
   }
   #+end_src

*** RefreshInterval
:PROPERTIES:
:CUSTOM_ID: refreshinterval
:END:
#+begin_src rust
pub enum RefreshInterval {
    MinFifteen,
    MinThirthy,
    HoursOne,
    HoursTwo,
    HoursFour,
    HoursEight,
}
#+end_src

*** OpeningMethod
:PROPERTIES:
:CUSTOM_ID: openingmethod
:END:
#+begin_src rust
pub enum OpeningMethod {
    Background,
    Foreground,
}
#+end_src

*** Browser
:PROPERTIES:
:CUSTOM_ID: browser
:END:
#+begin_src rust
pub enum Browser {
    Default,
    Safari,
    Firefox,
    Brave,
    Chrome,
    Opera,
    Edge,
}
#+end_src

*** Theme
:PROPERTIES:
:CUSTOM_ID: theme
:END:
#+begin_src rust
pub enum Theme {
    System,
    Light,
    Dark,
}
#+end_src

*** TextSize
:PROPERTIES:
:CUSTOM_ID: textsize
:END:
#+begin_src rust
pub enum TextSize {
    Small,
    Medium,
    Large,
    XLarge,
    XXLarge,
}
#+end_src

*** FeedStore
:PROPERTIES:
:CUSTOM_ID: feedstore
:END:
#+begin_src rust
pub enum FeedStore {
    Root,
    Folder,
}
#+end_src

*** FeedView
:PROPERTIES:
:CUSTOM_ID: feedview
:END:
#+begin_src rust
pub enum FeedView {
    Today,
    Unread,
    Starred,
    Folder,
    Feed,
}
#+end_src

*** ReadStatus
:PROPERTIES:
:CUSTOM_ID: readstatus
:END:
#+begin_src rust
pub enum ReadStatus {
    Read,
    Unread,
}
#+end_src

*** StarStatus
:PROPERTIES:
:CUSTOM_ID: starstatus
:END:
#+begin_src rust
pub enum StarStatus {
    Starred,
    Unstarred,
}
#+end_src

** Database
:PROPERTIES:
:CUSTOM_ID: database
:END:
- Almost all data eventually goes into the db. adding as I go.
- crate: [[https://crates.io/crates/surrealdb]]
- embed: [[https://surrealdb.com/docs/surrealdb/embedding/rust]]

** Events
:PROPERTIES:
:CUSTOM_ID: events
:END:
#+begin_src rust
#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, Eq)]
pub enum Event {
    // events from the shell
    SubsImport,
    SubsExport,
    SubsRefresh,
    SetSubsRefreshRate,
    DirAdd Account,
    DirDel Account,
    DirRename Account,
    FeedStore,
    FeedAdd,
    FeedDel,
    FeedMove,
    FeedRename,
    FeedRead,
    FeedUnread,
    FeedStar,
    FeedUnstar,
    EntryOpen Browser Method,
    ...

    // events local to the core
    #[serde(skip)]
    Fetch(crux_http::Result<crux_http::Response<Feed>, Box<dyn Error>>),
    ...
}
#+end_src
